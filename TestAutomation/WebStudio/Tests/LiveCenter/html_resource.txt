*** Settings ***

Documentation  A resource file containing the application specific keywords
...            that create our own domain specific language. This resource
...            implements keywords for testing HTML version of the test
...            application. Keywords for Flex version are in flex_resource.txt
...            and common_resource.txt is used to select which one to use.


*** Variables ***

${LOGIN URL}     http://172.24.201.221:8080/escenic
${WELCOME URL}   http://${SERVER}/html/welcome.html
${ERROR URL}     http://${SERVER}/html/error.html
${JENKINS URL}   http://172.24.201.221:8089


*** Keywords ***


Login To Escenic Live Center
    Open Browser To Escenic LiveCenter
    Input Environment Variable  userName  ELIVE_UserName
    Input Environment Variable  password  ELIVE_Password
    Submit Credentials
    Wait Until Page Contains Element  css=#control-menu > i
    Page Should Contain Element  css=#control-menu > i

Log Off From Escenic Live Center
    Click Element  css=i[class="menu_icon"]
    Wait Until Page Contains Element  css=i[class="lock_icon"]
    Click Element  css=i[class="lock_icon"]
    Wait Until Page Contains Element  xpath=//input[@value="LOGIN"]


Open New Editor
    Click Element  css=div[class='logo']
    Click Element  css=a[href="#/editor/new"]

Open Browser To Login Page
    Open Browser  ${LOGIN URL}  ${BROWSER}
    Maximize Browser Window
    Set Selenium Speed  ${DELAY}
    Title Should Be  Escenic Web Studio

Open Browser To Escenic LiveCenter
    Open Browser LiveCenter  ${BROWSER}
    Maximize Browser Window
    Set Selenium Speed  ${DELAY}
    	Title Should Be  Live Center

Go To Login Page
    Go To  ${LOGIN URL}
    Title Should Be  Login Page

Go To Change Password Page
    Click Link  xpath=//*[@href='/escenic/person/changePassword.do']  
 
Go To Change Language Page
    Click Link  xpath=//*[@href='/escenic/base/changeLanguage.do']  

Go To Link  [Arguments]  ${url}
    Click Link  xpath=//*[@href='${url}']

Go To WebStudio HomePage
	Go To Link  javascript:submitForm("main-menu")

Input Username  [Arguments]  ${username}
    Input Text  username_field  ${username}

#Input Password  [Arguments]  ${password}
#    Input Text  password_field  ${password}

Submit Credentials
    Click Button  LOGIN

Welcome Page Should Be Open
    Location Should Be  ${WELCOME URL}
    Title Should Be  Welcome Page

Login Should Have Failed
    Location Should Be  ${ERROR URL}
    Title Should Be  Error Page

Click For Multiple Cookies
    Click Element If Exists  css=button[class='hijack']

Check if Log off Link Exists
    Page Should Contain Link  xpath=//*[@href='/escenic/logoff.do']

Create User  [Arguments]  ${userName}
    Go To Link  javascript:submitForm("main-menu")
    Click Element  xpath=//*[@href="/escenic/user/new.do"]
    Input Text  firstName  ${userName}
    Input Text  surName  ${userName}
    Input Text  userName  ${userName}
    Input Text  newPassword  ${userName}
    Input Text  confirmPassword  ${userName}
    Click Element  xpath=//*[@value='Save']
	Alert Should Not Be Present
	##Click Search button and check if new user exists
	#Go To WebStudio HomePage
	#Click Element  xpath=//*[@href="javascript:submitForm('person-archive')"]
	Wait Until Page Contains  Person archive  50  error=None
	Page Should Contain Button  Search
	#Click Element  xpath=//*[@value='Search']
	#Wait Until Page Contains  View person  50  error=None
	#Click Element  xpath=//*[@value='Search']
	#Wait Until Page Contains  View person  10  error=None
	#Page Should Contain  View person

Create Section  [Arguments]  ${sectionName}
	Go To Link  javascript:submitForm("section-archive")
	Click Element  xpath=//*[@value='Search']
	Click Element  xpath=//*[@href="javascript:submitForm('redirect:/section/view.do?id=1')"]
	Go To Link  /escenic/section/new.do?id=1
	Input Text  name  ${sectionName}
	Input Text  uniqueName  ece_${sectionName}
	Click Element  xpath=//*[@value='Save']
		Alert Should Not Be Present
		#Assertion Check
		Page Should Contain Button  Search
		Click Element  xpath=//*[@value='Search']
		Wait Until Page Contains  ${sectionName}  10  error=None
		Page Should Contain  ${sectionName}

Delete Section  [Arguments]  ${sectionName}
	Go To Link  javascript:submitForm("section-archive")
	#Click Element  xpath=//*[@href="javascript:submitForm('redirect:/section/view.do?id=3')"
	Input Text  searchString  ${sectionName}
	Click Element  xpath=//*[@value='Search']
	Click Element  xpath=//a[.='Administer']
	Click Element  xpath=//a[.='Delete']
	Click Element  xpath=//a[.='Delete']
	Click Element  xpath=//*[@href="javascript:submitForm('delete')"]
		#Assertion Check
		Page Should Not Contain  ${sectionName} (ID:

Assign Global Role  [Arguments]  ${userName}  ${role}
	Go To WebStudio HomePage
	Click Element  xpath=//*[@href="javascript:submitForm('person-archive')"]
	Click Element  xpath=//a[.='${userName} ${userName}']
	Click Element  xpath=//*[@href="javascript:submitForm('editGlobalRoles')"]
	Select Checkbox   xpath=//*[@name="globalRole(${role})"]
	Click Element  xpath=//*[@value='Save']

Assign Section Role  [Arguments]  ${userName}  ${role}
	Go To WebStudio HomePage
	Click Element  xpath=//*[@href="javascript:submitForm('person-archive')"]
	Click Element  xpath=//a[.='${userName} ${userName}']
	Click Element  xpath=//*[@href="javascript:submitForm('editRoles')"]
	Select Checkbox   xpath=//*[@name="relatedObject(0001).attribute(${role})"]
	Click Element  xpath=//*[@value='Save']

Assign All Global Roles  [Arguments]  ${userName}
	Go To WebStudio HomePage
	Click Element  xpath=//*[@href="javascript:submitForm('person-archive')"]
	Click Element  xpath=//a[.='${userName} ${userName}']
	Click Element  xpath=//*[@href="javascript:submitForm('editGlobalRoles')"]
	Select Checkbox   xpath=//*[@name="globalRole(publicationadmin)"]
	Select Checkbox   xpath=//*[@name="globalRole(administrator)"]
	Select Checkbox   xpath=//*[@name="globalRole(useradmin)"]
	Select Checkbox   xpath=//*[@name="globalRole(editor)"]
	Select Checkbox   xpath=//*[@name="globalRole(journalist)"]
	Select Checkbox   xpath=//*[@name="globalRole(reader)"]
	Select Checkbox   xpath=//*[@name="globalRole(articleWithContentTypeReader)"]
	Select Checkbox   xpath=//*[@name="globalRole(articleWithContentTypeWriter)"]
	Select Checkbox   xpath=//*[@name="globalRole(dashboard-administrator)"]
	Select Checkbox   xpath=//*[@name="globalRole(content-moderator)"]
	Click Element  xpath=//*[@value='Save']

Assign All Section Roles  [Arguments]  ${userName}
	Go To WebStudio HomePage
	Click Element  xpath=//*[@href="javascript:submitForm('person-archive')"]
	Click Element  xpath=//a[.='${userName} ${userName}']
	Click Element  xpath=//*[@href="javascript:submitForm('editRoles')"]
	Select Checkbox   xpath=//*[@name="relatedObject(0001).attribute(administrator)"]
	Select Checkbox   xpath=//*[@name="relatedObject(0001).attribute(useradmin)"]
	Select Checkbox   xpath=//*[@name="relatedObject(0001).attribute(editor)"]
	Select Checkbox   xpath=//*[@name="relatedObject(0001).attribute(journalist)"]
	Select Checkbox   xpath=//*[@name="relatedObject(0001).attribute(reader)"]
	Click Element  xpath=//*[@value='Save']

	
Delete User  [Arguments]  ${userName}
	Go To WebStudio HomePage
	Click Element  xpath=//*[@href="javascript:submitForm('person-archive')"]
	Input Text  searchWord  ${userName}
	Click Button  Search
	Click Element If Exists  css=input[value='on']
	Click Element If Exists  css=a[href='javascript: confirmDelete()']
	Close Alert If Exists
	Click Link If Exists  css=a[href^="/escenic/person/search/deletePersons.do?deletePossible=true"]
	Page Should Not Contain  These items could not be deleted





Create Entry  [Arguments]  ${inputText}
	Wait Until Page Contains Element  css=textarea[id="field-basic-"]
	Input Text  css=textarea[id="field-basic-"]  ${inputText}
	Wait Until Page Contains Element  css=div.textArea[contenteditable="true"]  20
	Input Text  css=div[id="field-xhtml-"]  ${inputText}
	Sleep  1
	

Submit Entry
        Click Element  css=input[value="Submit"]
	Wait For  5

Open an Event
	Wait Until Page Contains Element  xpath=//div/h1[text()='Escenic Live Event Test']  10
	Click Element  xpath=//h1[contains(text(),'Escenic Live Event Test')]/../..//i[@class="edit_icon"]

Publish the Submitted Entry  [Arguments]  ${entryTitle}
	Wait Until Page Contains Element  xpath=//div/p[contains(text(),'${entryTitle}')]
	Mouse Over  xpath=//div/p[contains(text(),'${entryTitle}')]
        Click Element  xpath=//div/p[contains(text(),'${entryTitle}')]/../../.././/i[@class="check_icon"]
	Wait For  2
        Page Should Not Contain Element  xpath=//div/p[contains(text(),'${entryTitle}')]/../../.././/i[@class="check_icon"]

Make Entry Sticky
	Click Element  css=i[class="favorite_icon"]

Select Author  [Arguments]  ${inputText}
	Click Element  css=i[class="moreoptions_icon"]
	Wait Until Element is Visible  css=input[placeholder="Author..."]
	Input Text  css=input[placeholder="Author..."]  ${inputText}
	Input Text  css=input[placeholder="Author..."]  ${inputText}
	Wait Until Element is Visible  css=li.ui-menu-item a
	Click Element  css=li.ui-menu-item a
	Wait Until Element is Visible  css=div[data-id*="person"]
	
Add Tweet to an Entry  [Arguments]  ${inputText}
        Click Element  css=div[class="verticalTab vTab_twitter"]
	Wait until Page Contains Element  css=#social_twitter1 > div.scroll-wrapper.scrollbar-dynamic > div.scrollbar-dynamic.scroll-content.scroll-scrolly_visible > div:nth-child(1) > div > div.textColl  20
        Click Element  css=#social_twitter1 > div.scroll-wrapper.scrollbar-dynamic > div.scrollbar-dynamic.scroll-content.scroll-scrolly_visible > div:nth-child(1) > div > div.textColl
	Confirm If duplicate post
	Wait Until Page Contains Element  css=div.socialCard.inline  20
	Click Element  css=input[value="Publish"]
    	Wait Until Page Contains Element  xpath=//p[contains(text(),'${inputText}')]


Add Tag to an Entry  [Arguments]  ${inputText}
	Click Element  xpath=//textarea[@id="field-basic-"]/../../..//input[contains(@class, 'tags')]   
	Input Text  xpath=//textarea[@id="field-basic-"]/../../..//input[contains(@class, 'tags')]  ${inputText}
	Wait Until Element is Visible  xpath=//li[@class="ui-menu-item"]
	Click Element  xpath=//li[@class="ui-menu-item"]
	Click Element  css=input[value="Publish"]
	Wait For  5
	Page Should Contain Element  xpath=//*[contains(text(),'Test entry of Escenic event with a tag')]/../../../..//div[contains(text(),'${inputText}')]

Add youtube link to an Entry
	${n} = 	Set Variable If 	'${BROWSER}' == 'GoogleChrome' 	2 	1
        Click Element  css=div[class="verticalTab vTab_youtube"]
	Wait Until Page Contains Element  css=#social_youtube2 > div.scroll-wrapper.scrollbar-dynamic > div.scrollbar-dynamic.scroll-content.scroll-scrolly_visible > div:nth-child(${n})  20
        Click Element  css=#social_youtube2 > div.scroll-wrapper.scrollbar-dynamic > div.scrollbar-dynamic.scroll-content.scroll-scrolly_visible > div:nth-child(${n})
	Confirm If duplicate post
	Wait Until Page Contains Element  css=div.socialCard.inline  20
	
Login to Instagram
	Go To  https://www.instagram.com/accounts/login/
	Wait Until Page Contains Element  css=input[name="username"]  30
	Input Text  css=input[name="username"]  ecetesterqa
	Input Password  css=input[name="password"]  AllBugsBeware
	Click Button  Log in
	Wait Until Page Contains Element  css=a[href="/ecetesterqa/"]  30

Add instagram link to an Entry
        Click Element  css=div[class="verticalTab vTab_instagram"]
	Wait Until Element Is Visible   css=a[data-ng-click="doAuthentication('instagram')"]  30
	Mouse Over  css=a[data-ng-click="doAuthentication('instagram')"]
	Click Element  css=a[data-ng-click="doAuthentication('instagram')"]
	Wait until Page Contains Element  css=#social_instagram4 > div.scroll-wrapper.scrollbar-dynamic > div.scrollbar-dynamic.scroll-content.scroll-scrolly_visible > div:nth-child(1) > div  20
        Click Element  css=#social_instagram4 > div.scroll-wrapper.scrollbar-dynamic > div.scrollbar-dynamic.scroll-content.scroll-scrolly_visible > div:nth-child(1) > div
	Confirm If duplicate post
	Wait Until Page Contains Element  css=div.socialCard.inline  20
	Click Element  css=input[value="Publish"]
	Wait Until Page Contains Element  xpath=//div/p[contains(text(),'Test entry of Escenic event with an instagram link')]
    	Page Should Contain Element  xpath=//div/p[contains(text(),'Test entry of Escenic event with an instagram link')]

Add rss to an Entry
        Click Element  css=div[class="verticalTab vTab_rss"]
	Wait Until Page Contains Element  css=#social_rss3 > div.scroll-wrapper.scrollbar-dynamic > div.scrollbar-dynamic.scroll-content.scroll-scrolly_visible > div:nth-child(1) > div  20
        Click Element  css=#social_rss3 > div.scroll-wrapper.scrollbar-dynamic > div.scrollbar-dynamic.scroll-content.scroll-scrolly_visible > div:nth-child(1) > div
	Confirm If duplicate post
	Wait Until Page Contains Element  css=div.socialCard.inline  20
	Click Element  css=input[value="Publish"]
	Wait Until Page Contains Element  xpath=//div/p[contains(text(),'Test entry of Escenic event with a rss')]
    	Page Should Contain Element  xpath=//div/p[contains(text(),'Test entry of Escenic event with a rss')]

Confirm If duplicate post
	${previous kw}=         Register Keyword To Run On Failure      Nothing
	${status}  ${value} =  Run Keyword And Ignore Error  Wait Until Page Contains Element  css=input[value="CONFIRM"]
	Run Keyword If  '${status}' == 'PASS'  Click Element  css=input[value="CONFIRM"]
	Register Keyword To Run On Failure      ${previous kw}

Filter events by section
	Click Element  css=#select2-chosen-1
	Input Text  css=#s2id_autogen1_search  Sports
	Click Element  css=ul[class="select2-results"]
        Wait For  5
	Page Should Contain Element  xpath=//div/h3[text()='Boxing live!!!']

Update an Entry  [Arguments]  ${inputText}
	Click Element  xpath=//div/p[contains(text(),'This is an entry for update')]/../../.././/i[@class="edit_icon"]
	Wait Until Page Contains Element  xpath=//div/p[contains(text(),'This is an entry for update')]/../../../..//textarea
	Input Text  xpath=//div/p[contains(text(),'This is an entry for update')]/../../../..//textarea  ${input_text}
	Input Text  xpath=//div/p[contains(text(),'This is an entry for update')]/../../../..//div[@data-placeholder="Body"]  ${input_text}
	Sleep  1
	Click Element  css=input[value="Update"]
	
Delete an Entry  [Arguments]  ${entryTitle}
        Click Element  xpath=//div/p[contains(text(),'${entryTitle}')]/../../.././/i[@class="delete_icon"] 
	Wait Until Page Contains Element  css=input[value="CONFIRM"]
        Click Element  css=input[value="CONFIRM"]
	Wait Until Page Does Not Contain Element  xpath=//div/p[contains(text(),'${entryTitle}')]/../../.././/i[@class="delete_icon"]  5	
	Page Should Not Contain Element  xpath=//div/p[contains(text(),'${entryTitle}')]/../../.././/i[@class="delete_icon"]
	

Publish Entry
        Click Element  css=input[value="Publish"]
	Wait For  5

Add EmbedURL to an Entry  [Arguments]  ${embedUrl}
	Wait Until Element is Visible  css=button.scribeTool i.embedurl_scribe  30
	Click Element  css=button.scribeTool i.embedurl_scribe
	Wait Until Page Contains Element  css=#popup > h1
	Click Element  css=input[placeholder="URL: "]
	Input Text  css=input[placeholder="URL: "]  ${embedUrl}
	Click Element  css=input[value="OK"]
	Confirm If Duplicate Post
	Wait Until Page Contains Element  css=div.socialCard.inline  20


Add CSimage Content to an Entry
	Click Element  css=i[class="binaryarticle_scribe"]
	Wait Until Page Contains Element  css=#popup
	Click Element  css=#popup > h1 
	Choose File  css=input[type="file"]  C:\\Users\\Public\\Pictures\\Sample Pictures\\Desert.jpg
	Input Text  css=input[type="text"]  Desert
	Click Element  css=input[value="OK"]
	Wait Until Page Contains Element  css=div.textArea img.esc-content  20

Open live center publication event page
	Wait Until Page Contains Element  xpath=//a[contains(text(),'escenic-live-event-test')]
	${prsentationLink}=  Get Element Attribute  xpath=//a[contains(text(),'escenic-live-event-test')]@href
	Open Browser  ${prsentationLink}  ${BROWSER}
	Wait For  10

Login To Twitter
	Open Browser  https://twitter.com/login
	Input Text  css=input.js-username-field  ecetester
	Input Password  css=input.js-password-field  AllBugsBeware
	Unselect Checkbox  css=label.remember input
	Click Button  css=button.submit

Logout of Twitter
	Click Element  css=a.settings
	Wait Until Page Contains Element  css=li.js-signout-button
	Click Element  css=li.js-signout-button

Post Tweet  [Arguments]  ${tweet}
	Wait Until Page Contains Element  css=div.tweet-box div.rich-editor  20
	Click Element  css=div.tweet-box div.rich-editor
	Input Text  css=div.tweet-box div.rich-editor  ${tweet}
	Click Button  css=button.tweet-action
	Wait Until Page Contains Element  xpath=//div/p[contains(text(),'${tweet}')]

Delete Tweet  [Arguments]  ${tweet}
	Wait Until Page Contains Element  xpath=//div/p[contains(text(),'${tweet}')]/../..//span[@class="Icon Icon--dots"]  20
	Click Element  xpath=//div/p[contains(text(),'${tweet}')]/../..//span[@class="Icon Icon--dots"]
	Wait Until Element Is Visible  xpath=//div/p[contains(text(),'${tweet}')]/../..//li[@class="js-actionDelete"]
	Click Element  xpath=//div/p[contains(text(),'${tweet}')]/../..//li[@class="js-actionDelete"]
	Wait Until Page Contains Element  css=button.delete-action
	Click Element  css=button.delete-action
	Wait Until Page Does not Contain Element  xpath=//div/p[contains(text(),'${tweet}')]
	